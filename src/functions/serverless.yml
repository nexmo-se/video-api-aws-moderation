service: video-moderation-service

frameworkVersion: '2'

plugins:
 - serverless-apigw-binary

custom:
  apigwBinary:
    types:           #list of mime-types
      - 'multipart/form-data'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

# you can overwrite defaults here
  stage: ${file(config.json):STAGE}
  region: ${file(config.json):REGION}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:Query"
      Resource:
        - "Fn::Join":
            [
              "",
              [
                "arn:aws:dynamodb:",
                { "Ref": "AWS::Region" },
                ":",
                { "Ref": "AWS::AccountId" },
                ":table/${file(config.json):DYNAMODB_TABLE}",
              ],
            ]
    - Effect: "Allow"
      Action:
        - "rekognition:DetectModerationLabels"
      Resource:
        - '*'     
  # apiGateway:
  #   binaryMediaTypes:
  #     - 'image/png'
  #     - ‘image/jpeg’

functions:
  createRoom:
    handler: api/room.handler
    events:
      - http:
          path: /room
          method: post
          cors: true
    environment:
      OPENTOK_API_KEY: ${file(config.json):OPENTOK_API_KEY}
      OPENTOK_API_SECRET: ${file(config.json):OPENTOK_API_SECRET}
  moderation:
    handler: api/moderation.handler
    events:
      - http:
          path: /moderation
          method: post
          cors: true    


resources:
  Resources:
    VideoModerationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${file(config.json):DYNAMODB_TABLE}
